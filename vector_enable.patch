diff -ruN ns/ns-2.35/mobile/god.cc ns-allinone-2.35/ns-2.35/mobile/god.cc
--- ns/ns-2.35/mobile/god.cc	2006-12-27 22:57:23.000000000 +0800
+++ ns-allinone-2.35/ns-2.35/mobile/god.cc	2018-11-01 01:53:49.264114643 +0800
@@ -474,9 +474,9 @@
     return false;
   }
 
-  vector a(mb_node[i]->X(), mb_node[i]->Y(), mb_node[i]->Z());
-  vector b(mb_node[j]->X(), mb_node[j]->Y(), mb_node[j]->Z());
-  vector d = a - b;
+  vector_m a(mb_node[i]->X(), mb_node[i]->Y(), mb_node[i]->Z());
+  vector_m b(mb_node[j]->X(), mb_node[j]->Y(), mb_node[j]->Z());
+  vector_m d = a - b;
 
   if (d.length() < RANGE)
     return true;
diff -ruN ns/ns-2.35/mobile/god.h ns-allinone-2.35/ns-2.35/mobile/god.h
--- ns/ns-2.35/mobile/god.h	2006-02-21 23:20:19.000000000 +0800
+++ ns-allinone-2.35/ns-2.35/mobile/god.h	2018-11-01 01:53:27.040006459 +0800
@@ -76,39 +76,39 @@
 
 // Cut and Paste from setdest.h   -- Chalermek 12/1/99
 
-class vector {
+class vector_m {
 public:
-	vector(double x = 0.0, double y = 0.0, double z = 0.0) {
+	vector_m(double x = 0.0, double y = 0.0, double z = 0.0) {
 		X = x; Y = y; Z = z;
 	}
 	double length() {
 		return sqrt(X*X + Y*Y + Z*Z);
 	}
 
-	inline void operator=(const vector a) {
+	inline void operator=(const vector_m a) {
 		X = a.X;
 		Y = a.Y;
 		Z = a.Z;
 	}
-	inline void operator+=(const vector a) {
+	inline void operator+=(const vector_m a) {
 		X += a.X;
 		Y += a.Y;
 		Z += a.Z;
 	}
-	inline int operator==(const vector a) {
+	inline int operator==(const vector_m a) {
 		return (X == a.X && Y == a.Y && Z == a.Z);
 	}
-	inline int operator!=(const vector a) {
+	inline int operator!=(const vector_m a) {
 		return (X != a.X || Y != a.Y || Z != a.Z);
 	}
-	inline vector operator-(const vector a) {
-		return vector(X-a.X, Y-a.Y, Z-a.Z);
+	inline vector_m operator-(const vector_m a) {
+		return vector_m(X-a.X, Y-a.Y, Z-a.Z);
 	}
-	friend inline vector operator*(const double a, const vector b) {
-		return vector(a*b.X, a*b.Y, a*b.Z);
+	friend inline vector_m operator*(const double a, const vector_m b) {
+		return vector_m(a*b.X, a*b.Y, a*b.Z);
 	}
-	friend inline vector operator/(const vector a, const double b) {
-		return vector(a.X/b, a.Y/b, a.Z/b);
+	friend inline vector_m operator/(const vector_m a, const double b) {
+		return vector_m(a.X/b, a.Y/b, a.Z/b);
 	}
 
 	double X;

diff -ruN ns/ns-2.35/tcp/tcp-fack.cc ns-allinone-2.35/ns-2.35/tcp/tcp-fack.cc
--- ns/ns-2.35/tcp/tcp-fack.cc	2005-12-28 11:57:19.000000000 +0800
+++ ns-allinone-2.35/ns-2.35/tcp/tcp-fack.cc	2018-11-01 01:45:47.117753759 +0800
@@ -78,13 +78,13 @@
 
 	last_ack_ = tcph->seqno();
 	highest_ack_ = last_ack_;
-	fack_ = max(fack_,highest_ack_);
+	fack_ = max(int(fack_), int(highest_ack_));
 	/* 
 	 * There are conditions under which certain versions of TCP (e.g., tcp-fs)
 	 * retract maxseq_. The following line of code helps in those cases. For
 	 * versions of TCP, it is a NOP.
 */
-	maxseq_ = max(maxseq_, highest_ack_);
+	maxseq_ = max(int(maxseq_), int(highest_ack_));
 	if (t_seqno_ < last_ack_ + 1)
 		t_seqno_ = last_ack_ + 1;
 	newtimer(pkt);
diff -ruN ns/ns-2.35/tcp/tcp-fs.cc ns-allinone-2.35/ns-2.35/tcp/tcp-fs.cc
--- ns/ns-2.35/tcp/tcp-fs.cc	2000-09-01 11:04:07.000000000 +0800
+++ ns-allinone-2.35/ns-2.35/tcp/tcp-fs.cc	2018-11-01 01:49:05.482729235 +0800
@@ -65,7 +65,7 @@
 	double now = Scheduler::instance().clock();
 	double idle_time = now - last_recv_time_;
 	double timeout = ((t_srtt_ >> 3) + t_rttvar_) * tcp_tick_ ;
-	maxseq_ = max(maxseq_, highest_ack_);
+	maxseq_ = max(int(maxseq_), int(highest_ack_));
 
 	/* 
 	 * if the connection has been idle (with no outstanding data) for long 
@@ -172,7 +172,7 @@
 	else
 		ackcount = 1;
 	newack(pkt);
-	maxseq_ = max(maxseq_, highest_ack_);
+	maxseq_ = max(int(maxseq_), int(highest_ack_));
 	if (t_exact_srtt_ != 0) {
 		delta = tao - t_exact_srtt_;
 		if (delta < 0)
@@ -208,7 +208,7 @@
 {
 	partialnewack(pkt);
 	/* Do this because we may have retracted maxseq_ */
-	maxseq_ = max(maxseq_, highest_ack_);
+	maxseq_ = max(int(maxseq_), int(highest_ack_));
 	if (fs_mode_ && fast_loss_recov_) {
 		/* 
 		 * A partial new ack implies that more than one packet has been lost
diff -ruN ns/ns-2.35/tcp/tcp-linux.cc ns-allinone-2.35/ns-2.35/tcp/tcp-linux.cc
--- ns/ns-2.35/tcp/tcp-linux.cc	2008-03-22 00:21:31.000000000 +0800
+++ ns-allinone-2.35/ns-2.35/tcp/tcp-linux.cc	2018-11-01 01:47:20.406213431 +0800
@@ -151,7 +151,7 @@
 	if (flag&FLAG_DATA_ACKED) {
 		highest_ack_ = tcph->seqno();
 		linux_.snd_una = (highest_ack_+1)*linux_.mss_cache;
-		maxseq_ = max(maxseq_, highest_ack_);
+		maxseq_ = max(int(maxseq_), int(highest_ack_));
 		if (t_seqno_ < highest_ack_ + 1) {
 			t_seqno_ = highest_ack_ + 1;
 			linux_.snd_nxt = t_seqno_*linux_.mss_cache;